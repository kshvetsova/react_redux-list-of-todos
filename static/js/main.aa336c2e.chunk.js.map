{"version":3,"sources":["store/actions.ts","store/index.ts","api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionType","setSelectedId","value","type","SET_SELECTED_ID","setUser","SET_USER","getInitTodos","state","initTodos","valueSelect","valueFilter","result","filter","todo","completed","toLocaleLowerCase","title","toLowerCase","includes","getId","id","getSelectedId","selectedId","getUser","user","initialState","randomize","store","createStore","action","SET_INIT_TODOS","SET_ID","SET_VALUE_FILTER","SET_VALUE_SELECT","sort","a","b","userId","SET_RANDOMIZE","Math","random","request","url","fetch","then","res","json","TodoList","dispatch","useDispatch","todos","useSelector","useEffect","todosFromServer","some","className","map","classNames","checked","readOnly","onClick","CurrentUser","catch","name","email","phone","App","length","placeholder","onChange","e","target","item","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa336c2e.chunk.js","sourcesContent":["export enum ActionType {\n  SET_INIT_TODOS = 'SET_INIT_TODOS',\n  SET_ID = 'SET_ID',\n  SET_SELECTED_ID = 'SET_SELECTED_ID',\n  SET_VALUE_FILTER = 'SET_VALUE_FILTER',\n  SET_VALUE_SELECT = 'SET_VALUE_SELECT',\n  SET_RANDOMIZE = 'SET_RANDOMIZE',\n  SET_USER = 'SET_USER',\n}\n\nexport type Action = SetInitTodos | SetId | SetSelectedId\n| SetValueFilter | SetValueSelect | SetRandomize | SetUser;\n\ninterface SetInitTodos {\n  type: ActionType.SET_INIT_TODOS,\n  value: Todo[],\n}\n\ninterface SetId {\n  type: ActionType.SET_ID,\n  value: number,\n}\n\ninterface SetSelectedId {\n  type: ActionType.SET_SELECTED_ID,\n  value: number,\n}\n\ninterface SetValueFilter {\n  type: ActionType.SET_VALUE_FILTER,\n  value: string,\n}\n\ninterface SetValueSelect {\n  type: ActionType.SET_VALUE_SELECT,\n  value: string,\n}\n\ninterface SetRandomize {\n  type: ActionType.SET_RANDOMIZE,\n}\n\ninterface SetUser {\n  type: ActionType.SET_USER,\n  value: User | null,\n}\n\nexport const setInitTodos = (value: Todo[]): SetInitTodos => (\n  { type: ActionType.SET_INIT_TODOS, value }\n);\n\nexport const setId = (value: number): SetId => (\n  { type: ActionType.SET_ID, value }\n);\n\nexport const setSelectedId = (value: number): SetSelectedId => (\n  { type: ActionType.SET_SELECTED_ID, value }\n);\n\nexport const setValueFilter = (value: string): SetValueFilter => (\n  { type: ActionType.SET_VALUE_FILTER, value }\n);\n\nexport const setValueSelect = (value: string): SetValueSelect => (\n  { type: ActionType.SET_VALUE_SELECT, value }\n);\n\nexport const setRandomize = (): SetRandomize => (\n  { type: ActionType.SET_RANDOMIZE }\n);\n\nexport const setUser = (value: User | null): SetUser => (\n  { type: ActionType.SET_USER, value }\n);\n","import { createStore } from 'redux';\nimport { Action, ActionType } from './actions';\n\nexport const getInitTodos = (state: RootState) => {\n  const {\n    initTodos,\n    valueSelect,\n    valueFilter,\n  } = state;\n  let result = initTodos;\n\n  result = result.filter((todo) => {\n    switch (valueSelect) {\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        return todo;\n    }\n  });\n\n  if (valueFilter) {\n    const value = valueFilter.toLocaleLowerCase();\n\n    result = result.filter(todo => (\n      todo.title.toLowerCase().includes(value)));\n  }\n\n  return result;\n};\n\nexport const getId = (state: RootState) => state.id;\nexport const getSelectedId = (state: RootState) => state.selectedId;\nexport const getValueFilter = (state: RootState) => state.valueFilter;\nexport const getValueSelect = (state: RootState) => state.valueSelect;\nexport const getUser = (state: RootState) => state.user;\n\nconst initialState: RootState = {\n  initTodos: [],\n  id: 0,\n  selectedId: 0,\n  valueFilter: '',\n  valueSelect: 'all',\n  randomize: false,\n  user: null,\n};\n\nconst rootReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.SET_INIT_TODOS:\n      return {\n        ...state,\n        initTodos: action.value,\n      };\n\n    case ActionType.SET_ID:\n      return {\n        ...state,\n        initTodos: state.initTodos\n          .filter(todo => todo.id !== action.value),\n        id: action.value,\n      };\n\n    case ActionType.SET_SELECTED_ID:\n      return {\n        ...state,\n        selectedId: action.value,\n      };\n\n    case ActionType.SET_VALUE_FILTER:\n      return {\n        ...state,\n        valueFilter: action.value,\n      };\n\n    case ActionType.SET_VALUE_SELECT:\n      return {\n        ...state,\n        initTodos: state.randomize\n          ? [...state.initTodos].sort((a, b) => a.userId - b.userId)\n          : state.initTodos,\n        valueSelect: action.value,\n        selectedId: 0,\n        randomize: false,\n      };\n\n    case ActionType.SET_RANDOMIZE:\n      return {\n        ...state,\n        initTodos: [...state.initTodos].sort(() => Math.random() - 0.5),\n        randomize: true,\n      };\n    case ActionType.SET_USER:\n      return {\n        ...state,\n        user: action.value,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n);\n\nexport default store;\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => fetch(`${BASE_URL}${url}`)\n  .then(res => res.json());\n\nexport const getTodos = (): Promise<Todo[]> => request('/todos');\nexport const getUsers = (userId: number): Promise<User | null> => request(`/users/${userId}`);\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport classNames from 'classnames';\nimport { getInitTodos, getId, getSelectedId } from '../../store';\nimport { setInitTodos, setSelectedId, setId } from '../../store/actions';\nimport { getTodos } from '../../api';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getInitTodos);\n  const id = useSelector(getId);\n  const selectedId = useSelector(getSelectedId);\n\n  useEffect(() => {\n    getTodos().then(res => {\n      const todosFromServer = res.sort((a, b) => a.userId - b.userId);\n\n      dispatch(setInitTodos(todosFromServer));\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!todos.some(todo => todo.userId === selectedId)) {\n      dispatch(setSelectedId(0));\n    }\n  }, [id]);\n\n  return (\n    <div className=\"TodoList\">\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item', {\n                'TodoList__item--checked': todo.completed,\n              })}\n            >\n              <div className=\"TodoList__item-container\">\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  className={classNames('TodoList__user-button', 'button', {\n                    'user-button': selectedId === todo.userId,\n                  })}\n                  type=\"button\"\n                  data-cy=\"userButton\"\n                  onClick={() => (\n                    dispatch(setSelectedId(todo.userId))\n                  )}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </div>\n              <button\n                type=\"button\"\n                className=\"button button-delete\"\n                onClick={() => dispatch(setId(todo.id))}\n              >\n                X\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getUsers } from '../../api';\nimport { setSelectedId, setUser } from '../../store/actions';\nimport { getSelectedId, getUser } from '../../store';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getUser);\n  const dispatch = useDispatch();\n  const selectedId = useSelector(getSelectedId);\n\n  useEffect(() => {\n    getUsers(selectedId)\n      .then((res) => dispatch(setUser(res)))\n      .catch(() => dispatch(setUser(null)));\n  }, [selectedId]);\n\n  return (\n    user ? (\n      <div className=\"CurrentUser\">\n        <div className=\"container\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${selectedId}`}</span>\n          </h2>\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clear\"\n            onClick={() => dispatch(setSelectedId(0))}\n          >\n            X\n          </button>\n        </div>\n\n        <h3 className=\"CurrentUser__name\" data-cy=\"userName\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n      </div>\n    ) : <div>No user details</div>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getInitTodos, getSelectedId } from './store';\nimport { setValueFilter, setValueSelect, setRandomize } from './store/actions';\nimport './styles/general.scss';\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getInitTodos);\n  const selectedId = useSelector(getSelectedId);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <h2>{`Todos: ${todos.length}`}</h2>\n        <div className=\"sidebar\">\n          <input\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Enter title\"\n            onChange={(e) => dispatch(setValueFilter(e.target.value))}\n          />\n          <select\n            className=\"select\"\n            onChange={(e) => dispatch(setValueSelect(e.target.value))}\n          >\n            {['all', 'active', 'completed'].map(item => (\n              <option key={item}>{item}</option>\n            ))}\n          </select>\n          <button\n            type=\"button\"\n            className=\"randomize\"\n            onClick={() => dispatch(setRandomize())}\n          >\n            Randomize\n          </button>\n        </div>\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedId ? <CurrentUser /> : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}